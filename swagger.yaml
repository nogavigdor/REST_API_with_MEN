openapi: 3.0.0
info:
  title: MEN RESTful API
  description: A RESTful API for managing furniture products in a store. Built with MongoDB, Express, and Node.js.

  Features include:
    - **Product Management**: Create, retrieve, update, and delete furniture products with ease. Each product can be described with details such as name, description, price, availability, and categories.
    - **User Registration**: Register new users securely.
    - **Authentication**: Authenticate users with JWT tokens to ensure secure access to protected resources.
    - **Swagger Documentation**: Explore the API endpoints, request parameters, and response schemas with interactive Swagger documentation.

  version: 1.0.0
servers:
  - url: http://localhost:4000/api
    description: Localhost development server
  - url: https://rest-api-with-men.onrender.com/api
    description: Remote deployment on render.com

tags:
  - name: Get Routes
    description: Routes that get furniture products
  - name: Post Routes
    description: Routes that create furniture products
  - name: Put Routes
    description: Routes that update furniture products
  - name: Delete Routes
    description: Routes that delete furniture products
  - name: User Routes
    description: Routes that handle user registration and login



components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        inStock:
          type: boolean
        categories:
          type: array
          items:
           type: string
        imageData:
          type: string
          format: binary
          description: "Binary data of the image. Not directly exposed in API responses."
        imageType:
          type: string
        imageUrl:
          type: string
          description: "URL to access the image directly if available."
    
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string

paths:

  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string


  /products:
    get:
      tags:
      - Get Routes
      summary: Retrieves a list of Products
      description: Retrieves a list of products as JSON objects.
      responses:
        200:
          description: A list of product JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    
    post:
      tags:
      - Post Routes
      summary: Create a new Product
      description: Create a new Product
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                inStock:
                  type: boolean
                categories:
                  type: array
                  items:
                    type: string
                image:
                  type: string
                  format: binary
                  description: "Binary image data to be stored."
      responses:
        201:
          description: Product created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

    put:
      tags:
      - Put Routes
      summary: Updates a specific Product
      description: Updates a specific Product based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                inStock:
                  type: boolean
                categories:
                  type: array
                  items:
                    type: string
                image:
                  type: string
                  format: binary
                  description: "Binary image data to replace existing image."
      responses:
        201:
          description: Product updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product was updated successfully.
                  data:
                    $ref: "#/components/schemas/Product"
                  link:
                    type: string
                    format: uri
                    example: "http://localhost:4000/api/products/{id}"
        404:
          description: Product not found
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
               type: object
                properties:
                  message:
                    type: string
                    example: Error updating product with id = {id}
    delete:
      tags:
      - Delete Routes
      summary: Deletes a specific Product
      description: Deletes a specific Product based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Product deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /products/{id}/image:
    get:
      tags:
        - Product Routes
      summary: Retrieve Product Image
      description: Retrieves the image for the specified product as a binary data stream.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the product whose image is to be fetched.
          schema:
            type: string
      responses:
        200:
          description: The image file in its original format.
          content:
            '*/*':
              schema:
                type: string
                format: binary
        404:
          description: Image not found.
        500:
          description: Server error.              




    

    